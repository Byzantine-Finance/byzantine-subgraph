# ========================== Subgraph for Auction ==========================

type NodeOperator @entity {
  id: Bytes! # nodeOpAddr as ID
  nodeOpAddr: String! # address
  hasPendingBids: Boolean!
  bids: [BidPlaced!] @derivedFrom(field: "nodeOp")
  clusters: [ClusterCreated!] 
}

type BidPlaced @entity {
  id: Bytes! # bidId
  nodeOp: NodeOperator! # reference to NodeOperator
  discountRate: BigDecimal! # Scaled down to 1e2
  duration: BigInt! # uint256
  bidPrice: BigDecimal! # Converted bidPrice in Ether
  auctionScore: BigInt! # uint256
  timestamp: BigInt!
  txHash: String # hash of the transaction
  bidStatus: BidStatus!
  auctionType: AuctionType!
}

type ClusterCreated @entity {
  id: Bytes! # clusterId
  averageAuctionScore: BigInt
  splitAddress: String
  eigenPodAddr: String
  timestamp: BigInt
  txHash: String
  winners: [BidPlaced!]!
  vault: VaultCreated # reference to VaultCreated entity, available only when the ClusterCreated event is emitted
}

type VaultCreated @entity {
  id: Bytes! # vault address
  protocol: VaultProtocol!
  type: VaultType!
  operator: String!
  creator: String!
  oracle: String!
  whitelistedDeposit: Boolean!
  upgradeable: Boolean!
  timestamp: BigInt!
  txHash: String!
  tvl: BigInt!
  clusters: [ClusterCreated!] @derivedFrom(field: "vault")
}

enum BidStatus {
  Closed # bid withdrawn or already won
  Pending # bid waiting to join cluster
  Active # winner joined cluster
}

enum AuctionType {
  Null
  ClusterSize4 
  ClusterSize7
} 

enum VaultProtocol {
  EigenLayer
  Symbiotic
  Babylon
}

enum VaultType {
  Native
  Liquid
}

# ========================== Subgraph for Deposit contract ==========================

type DepositContract @entity {
  id: Bytes!
  isPermissionlessDeposit: Boolean!
  depositors: [Depositor!]
  tokens: [Token!]
}

type Token @entity {
  id: Bytes! # token address
  allowedToken: Boolean!
  totalDeposit: BigInt!
  availableDeposit: BigInt!
  totalMovedToVault: BigInt!
  depositors: [DepositorToken!] @derivedFrom(field: "token")
  balanceOverTime: [BalanceOverTime!]
}

type Depositor @entity {
  id: Bytes! # depositor address
  canDeposit: Boolean!
  depositTokens: [DepositorToken!] @derivedFrom(field: "depositor")
}

type DepositorToken @entity {
  id: Bytes! # set to `depositor.id.concat(token.id)`
  depositor: Depositor!
  token: Token!
  totalBalance: BigInt!
  balanceOverTime: [BalanceOverTime!]
}

# serves as a placeholder for balance over time
type BalanceOverTime @entity {
  id: Bytes! 
  depositTime: BigInt!
  balance: BigInt!
}