type NodeOperator @entity {
  id: Bytes! # nodeOpAddr as ID
  nodeOpAddr: String! # address
  hasPendingBids: Boolean!
  bids: [BidPlaced!] @derivedFrom(field: "nodeOp")
  clusters: [ClusterCreated!] 
}

type BidPlaced @entity {
  id: Bytes! # bidId
  nodeOp: NodeOperator! # reference to NodeOperator
  discountRate: BigDecimal! # Scaled down to 1e2
  duration: BigInt! # uint256
  bidPrice: BigDecimal! # Converted bidPrice in Ether
  auctionScore: BigInt! # uint256
  timestamp: BigInt!
  txHash: String # hash of the transaction
  bidStatus: BidStatus!
  auctionType: AuctionType!
}

type ClusterCreated @entity {
  id: Bytes! # clusterId
  averageAuctionScore: BigInt!
  splitAddress: String!
  timestamp: BigInt!
  txHash: String!
  winners: [BidPlaced!]!
}

enum BidStatus {
  Closed # bid withdrawn or already won
  Pending # bid waiting to join cluster
  Active # winner joined cluster
}

enum AuctionType {
  Null
  ClusterSize4 
  ClusterSize7
} type EigenLayerNativeVaultCreated @entity(immutable: true) {
  id: Bytes!
  vaultAddr: Bytes! # address
  eigenLayerStrat: Bytes! # address
  vaultCreator: Bytes! # address
  byzantineOracle: Bytes! # address
  privateVault: Boolean! # bool
  stratUpgradeable: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
